import { z } from "zod";
import { JSONValue, GlobalRole, SubscriptionPlanStatus, Status } from "./types";
export declare const jSONValueSchema: z.ZodSchema<JSONValue>;
export declare const globalRoleSchema: z.ZodNativeEnum<typeof GlobalRole>;
export declare const userSchema: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    role: z.ZodNativeEnum<typeof GlobalRole>;
    isEmailVerified: z.ZodBoolean;
    didAgreeToTOS: z.ZodBoolean;
    doAutoTrainEntities: z.ZodBoolean;
    userPrivilegedId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    role: GlobalRole;
    isEmailVerified: boolean;
    didAgreeToTOS: boolean;
    doAutoTrainEntities: boolean;
    userPrivilegedId: string;
}, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    role: GlobalRole;
    isEmailVerified: boolean;
    didAgreeToTOS: boolean;
    doAutoTrainEntities: boolean;
    userPrivilegedId: string;
}>;
export declare const subscriptionPlanStatusSchema: z.ZodNativeEnum<typeof SubscriptionPlanStatus>;
export declare const userPrivilegedSchema: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    email: z.ZodNullable<z.ZodString>;
    emailVerificationToken: z.ZodNullable<z.ZodString>;
    nonce: z.ZodNullable<z.ZodString>;
    subscriptionPlan: z.ZodNullable<z.ZodString>;
    subscriptionPlanStatus: z.ZodNativeEnum<typeof SubscriptionPlanStatus>;
    stripeCustomerId: z.ZodNullable<z.ZodString>;
    numGeneratedImagesRemaining: z.ZodNumber;
    numHighResDownloadsRemaining: z.ZodNumber;
    numMaxAvatarsAllowed: z.ZodNumber;
    stripeBillingErrorMessage: z.ZodNullable<z.ZodString>;
    hasEverPaid: z.ZodBoolean;
    isUnsubscribedFromEmails: z.ZodBoolean;
    intercomUserHash: z.ZodNullable<z.ZodString>;
    apiKey: z.ZodString;
    inviteCode: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    email: string | null;
    emailVerificationToken: string | null;
    nonce: string | null;
    subscriptionPlan: string | null;
    subscriptionPlanStatus: SubscriptionPlanStatus;
    stripeCustomerId: string | null;
    numGeneratedImagesRemaining: number;
    numHighResDownloadsRemaining: number;
    numMaxAvatarsAllowed: number;
    stripeBillingErrorMessage: string | null;
    hasEverPaid: boolean;
    isUnsubscribedFromEmails: boolean;
    intercomUserHash: string | null;
    apiKey: string;
    inviteCode: string | null;
}, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    email: string | null;
    emailVerificationToken: string | null;
    nonce: string | null;
    subscriptionPlan: string | null;
    subscriptionPlanStatus: SubscriptionPlanStatus;
    stripeCustomerId: string | null;
    numGeneratedImagesRemaining: number;
    numHighResDownloadsRemaining: number;
    numMaxAvatarsAllowed: number;
    stripeBillingErrorMessage: string | null;
    hasEverPaid: boolean;
    isUnsubscribedFromEmails: boolean;
    intercomUserHash: string | null;
    apiKey: string;
    inviteCode: string | null;
}>;
export declare const statusSchema: z.ZodNativeEnum<typeof Status>;
export declare const trainedEntitySchema: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    userId: z.ZodString;
    status: z.ZodNativeEnum<typeof Status>;
    replicateTrainingId: z.ZodNullable<z.ZodString>;
    replicateModelVersionId: z.ZodNullable<z.ZodString>;
    replicateModelName: z.ZodString;
    replicateAccountName: z.ZodString;
    identifierToken: z.ZodString;
    classNoun: z.ZodString;
    displayName: z.ZodString;
    thumbnailUrl: z.ZodString;
    trainingDataZipUrl: z.ZodString;
    input: z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>;
}, "strip", z.ZodTypeAny, {
    input: JSONValue;
    status: Status;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    userId: string;
    replicateTrainingId: string | null;
    replicateModelVersionId: string | null;
    replicateModelName: string;
    replicateAccountName: string;
    identifierToken: string;
    classNoun: string;
    displayName: string;
    thumbnailUrl: string;
    trainingDataZipUrl: string;
}, {
    input: JSONValue;
    status: Status;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    userId: string;
    replicateTrainingId: string | null;
    replicateModelVersionId: string | null;
    replicateModelName: string;
    replicateAccountName: string;
    identifierToken: string;
    classNoun: string;
    displayName: string;
    thumbnailUrl: string;
    trainingDataZipUrl: string;
}>;
export declare const userLoggedInDataSchema: z.ZodObject<{
    user: z.ZodIntersection<z.ZodObject<{
        id: z.ZodString;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        role: z.ZodNativeEnum<typeof GlobalRole>;
        isEmailVerified: z.ZodBoolean;
        didAgreeToTOS: z.ZodBoolean;
        doAutoTrainEntities: z.ZodBoolean;
        userPrivilegedId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        role: GlobalRole;
        isEmailVerified: boolean;
        didAgreeToTOS: boolean;
        doAutoTrainEntities: boolean;
        userPrivilegedId: string;
    }, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        role: GlobalRole;
        isEmailVerified: boolean;
        didAgreeToTOS: boolean;
        doAutoTrainEntities: boolean;
        userPrivilegedId: string;
    }>, z.ZodObject<{
        userPrivileged: z.ZodObject<{
            id: z.ZodString;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
            email: z.ZodNullable<z.ZodString>;
            emailVerificationToken: z.ZodNullable<z.ZodString>;
            nonce: z.ZodNullable<z.ZodString>;
            subscriptionPlan: z.ZodNullable<z.ZodString>;
            subscriptionPlanStatus: z.ZodNativeEnum<typeof SubscriptionPlanStatus>;
            stripeCustomerId: z.ZodNullable<z.ZodString>;
            numGeneratedImagesRemaining: z.ZodNumber;
            numHighResDownloadsRemaining: z.ZodNumber;
            numMaxAvatarsAllowed: z.ZodNumber;
            stripeBillingErrorMessage: z.ZodNullable<z.ZodString>;
            hasEverPaid: z.ZodBoolean;
            isUnsubscribedFromEmails: z.ZodBoolean;
            intercomUserHash: z.ZodNullable<z.ZodString>;
            apiKey: z.ZodString;
            inviteCode: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string | null;
            emailVerificationToken: string | null;
            nonce: string | null;
            subscriptionPlan: string | null;
            subscriptionPlanStatus: SubscriptionPlanStatus;
            stripeCustomerId: string | null;
            numGeneratedImagesRemaining: number;
            numHighResDownloadsRemaining: number;
            numMaxAvatarsAllowed: number;
            stripeBillingErrorMessage: string | null;
            hasEverPaid: boolean;
            isUnsubscribedFromEmails: boolean;
            intercomUserHash: string | null;
            apiKey: string;
            inviteCode: string | null;
        }, {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string | null;
            emailVerificationToken: string | null;
            nonce: string | null;
            subscriptionPlan: string | null;
            subscriptionPlanStatus: SubscriptionPlanStatus;
            stripeCustomerId: string | null;
            numGeneratedImagesRemaining: number;
            numHighResDownloadsRemaining: number;
            numMaxAvatarsAllowed: number;
            stripeBillingErrorMessage: string | null;
            hasEverPaid: boolean;
            isUnsubscribedFromEmails: boolean;
            intercomUserHash: string | null;
            apiKey: string;
            inviteCode: string | null;
        }>;
        trainedEntities: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
            userId: z.ZodString;
            status: z.ZodNativeEnum<typeof Status>;
            replicateTrainingId: z.ZodNullable<z.ZodString>;
            replicateModelVersionId: z.ZodNullable<z.ZodString>;
            replicateModelName: z.ZodString;
            replicateAccountName: z.ZodString;
            identifierToken: z.ZodString;
            classNoun: z.ZodString;
            displayName: z.ZodString;
            thumbnailUrl: z.ZodString;
            trainingDataZipUrl: z.ZodString;
            input: z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>;
        }, "strip", z.ZodTypeAny, {
            input: JSONValue;
            status: Status;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            replicateTrainingId: string | null;
            replicateModelVersionId: string | null;
            replicateModelName: string;
            replicateAccountName: string;
            identifierToken: string;
            classNoun: string;
            displayName: string;
            thumbnailUrl: string;
            trainingDataZipUrl: string;
        }, {
            input: JSONValue;
            status: Status;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            replicateTrainingId: string | null;
            replicateModelVersionId: string | null;
            replicateModelName: string;
            replicateAccountName: string;
            identifierToken: string;
            classNoun: string;
            displayName: string;
            thumbnailUrl: string;
            trainingDataZipUrl: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        userPrivileged: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string | null;
            emailVerificationToken: string | null;
            nonce: string | null;
            subscriptionPlan: string | null;
            subscriptionPlanStatus: SubscriptionPlanStatus;
            stripeCustomerId: string | null;
            numGeneratedImagesRemaining: number;
            numHighResDownloadsRemaining: number;
            numMaxAvatarsAllowed: number;
            stripeBillingErrorMessage: string | null;
            hasEverPaid: boolean;
            isUnsubscribedFromEmails: boolean;
            intercomUserHash: string | null;
            apiKey: string;
            inviteCode: string | null;
        };
        trainedEntities: {
            input: JSONValue;
            status: Status;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            replicateTrainingId: string | null;
            replicateModelVersionId: string | null;
            replicateModelName: string;
            replicateAccountName: string;
            identifierToken: string;
            classNoun: string;
            displayName: string;
            thumbnailUrl: string;
            trainingDataZipUrl: string;
        }[];
    }, {
        userPrivileged: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string | null;
            emailVerificationToken: string | null;
            nonce: string | null;
            subscriptionPlan: string | null;
            subscriptionPlanStatus: SubscriptionPlanStatus;
            stripeCustomerId: string | null;
            numGeneratedImagesRemaining: number;
            numHighResDownloadsRemaining: number;
            numMaxAvatarsAllowed: number;
            stripeBillingErrorMessage: string | null;
            hasEverPaid: boolean;
            isUnsubscribedFromEmails: boolean;
            intercomUserHash: string | null;
            apiKey: string;
            inviteCode: string | null;
        };
        trainedEntities: {
            input: JSONValue;
            status: Status;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            replicateTrainingId: string | null;
            replicateModelVersionId: string | null;
            replicateModelName: string;
            replicateAccountName: string;
            identifierToken: string;
            classNoun: string;
            displayName: string;
            thumbnailUrl: string;
            trainingDataZipUrl: string;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    user: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        role: GlobalRole;
        isEmailVerified: boolean;
        didAgreeToTOS: boolean;
        doAutoTrainEntities: boolean;
        userPrivilegedId: string;
    } & {
        userPrivileged: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string | null;
            emailVerificationToken: string | null;
            nonce: string | null;
            subscriptionPlan: string | null;
            subscriptionPlanStatus: SubscriptionPlanStatus;
            stripeCustomerId: string | null;
            numGeneratedImagesRemaining: number;
            numHighResDownloadsRemaining: number;
            numMaxAvatarsAllowed: number;
            stripeBillingErrorMessage: string | null;
            hasEverPaid: boolean;
            isUnsubscribedFromEmails: boolean;
            intercomUserHash: string | null;
            apiKey: string;
            inviteCode: string | null;
        };
        trainedEntities: {
            input: JSONValue;
            status: Status;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            replicateTrainingId: string | null;
            replicateModelVersionId: string | null;
            replicateModelName: string;
            replicateAccountName: string;
            identifierToken: string;
            classNoun: string;
            displayName: string;
            thumbnailUrl: string;
            trainingDataZipUrl: string;
        }[];
    };
}, {
    user: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        role: GlobalRole;
        isEmailVerified: boolean;
        didAgreeToTOS: boolean;
        doAutoTrainEntities: boolean;
        userPrivilegedId: string;
    } & {
        userPrivileged: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string | null;
            emailVerificationToken: string | null;
            nonce: string | null;
            subscriptionPlan: string | null;
            subscriptionPlanStatus: SubscriptionPlanStatus;
            stripeCustomerId: string | null;
            numGeneratedImagesRemaining: number;
            numHighResDownloadsRemaining: number;
            numMaxAvatarsAllowed: number;
            stripeBillingErrorMessage: string | null;
            hasEverPaid: boolean;
            isUnsubscribedFromEmails: boolean;
            intercomUserHash: string | null;
            apiKey: string;
            inviteCode: string | null;
        };
        trainedEntities: {
            input: JSONValue;
            status: Status;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            replicateTrainingId: string | null;
            replicateModelVersionId: string | null;
            replicateModelName: string;
            replicateAccountName: string;
            identifierToken: string;
            classNoun: string;
            displayName: string;
            thumbnailUrl: string;
            trainingDataZipUrl: string;
        }[];
    };
}>;

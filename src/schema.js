"use strict";
exports.__esModule = true;
exports.userLoggedInDataSchema = exports.trainedEntitySchema = exports.statusSchema = exports.userPrivilegedSchema = exports.subscriptionPlanStatusSchema = exports.userSchema = exports.globalRoleSchema = exports.jSONValueSchema = void 0;
// Generated by ts-to-zod
var zod_1 = require("zod");
var types_1 = require("./types");
exports.jSONValueSchema = zod_1.z.lazy(function () {
    return zod_1.z.union([
        zod_1.z.string(),
        zod_1.z.number(),
        zod_1.z.boolean(),
        zod_1.z.record(exports.jSONValueSchema),
        zod_1.z.array(exports.jSONValueSchema),
    ]);
});
exports.globalRoleSchema = zod_1.z.nativeEnum(types_1.GlobalRole);
exports.userSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    role: exports.globalRoleSchema,
    isEmailVerified: zod_1.z.boolean(),
    didAgreeToTOS: zod_1.z.boolean(),
    doAutoTrainEntities: zod_1.z.boolean(),
    userPrivilegedId: zod_1.z.string()
});
exports.subscriptionPlanStatusSchema = zod_1.z.nativeEnum(types_1.SubscriptionPlanStatus);
exports.userPrivilegedSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    email: zod_1.z.string().nullable(),
    emailVerificationToken: zod_1.z.string().nullable(),
    nonce: zod_1.z.string().nullable(),
    subscriptionPlan: zod_1.z.string().nullable(),
    subscriptionPlanStatus: exports.subscriptionPlanStatusSchema,
    stripeCustomerId: zod_1.z.string().nullable(),
    numGeneratedImagesRemaining: zod_1.z.number(),
    numHighResDownloadsRemaining: zod_1.z.number(),
    numMaxAvatarsAllowed: zod_1.z.number(),
    stripeBillingErrorMessage: zod_1.z.string().nullable(),
    hasEverPaid: zod_1.z.boolean(),
    isUnsubscribedFromEmails: zod_1.z.boolean(),
    intercomUserHash: zod_1.z.string().nullable(),
    apiKey: zod_1.z.string(),
    inviteCode: zod_1.z.string().nullable()
});
exports.statusSchema = zod_1.z.nativeEnum(types_1.Status);
exports.trainedEntitySchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    userId: zod_1.z.string(),
    status: exports.statusSchema,
    replicateTrainingId: zod_1.z.string().nullable(),
    replicateModelVersionId: zod_1.z.string().nullable(),
    replicateModelName: zod_1.z.string(),
    replicateAccountName: zod_1.z.string(),
    identifierToken: zod_1.z.string(),
    classNoun: zod_1.z.string(),
    displayName: zod_1.z.string(),
    thumbnailUrl: zod_1.z.string(),
    trainingDataZipUrl: zod_1.z.string(),
    input: exports.jSONValueSchema
});
exports.userLoggedInDataSchema = zod_1.z.object({
    user: exports.userSchema.and(zod_1.z.object({
        userPrivileged: exports.userPrivilegedSchema,
        trainedEntities: zod_1.z.array(exports.trainedEntitySchema)
    }))
});

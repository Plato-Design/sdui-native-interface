"use strict";
exports.__esModule = true;
exports.userLoggedInDataSchema = exports.loggedInUserPredictionImageSchema = exports.dislikedPredictionImageSchema = exports.bookmarkedPredictionImageSchema = exports.inputQuerySchema = exports.visibilitySchema = exports.inputQueryPredictionSchema = exports.predictionSchema = exports.predictionImageSchema = exports.trainedEntitySchema = exports.statusSchema = exports.userPrivilegedSchema = exports.subscriptionPlanStatusSchema = exports.userNativeSessionApiKeySchema = exports.userSchema = exports.globalRoleSchema = exports.jsonValueSchema = void 0;
// Generated by ts-to-zod
var zod_1 = require("zod");
var types_1 = require("./types");
exports.jsonValueSchema = zod_1.z.lazy(function () {
    return zod_1.z.union([
        zod_1.z.string(),
        zod_1.z.number(),
        zod_1.z.boolean(),
        zod_1.z.record(exports.jsonValueSchema),
        zod_1.z.array(exports.jsonValueSchema),
    ]);
});
exports.globalRoleSchema = zod_1.z.nativeEnum(types_1.GlobalRole);
exports.userSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    role: exports.globalRoleSchema,
    isEmailVerified: zod_1.z.boolean(),
    didAgreeToTOS: zod_1.z.boolean(),
    doAutoTrainEntities: zod_1.z.boolean(),
    userPrivilegedId: zod_1.z.string()
});
exports.userNativeSessionApiKeySchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    userId: zod_1.z.string(),
    apiKey: zod_1.z.string(),
    expiresAt: zod_1.z.date(),
    loggedOut: zod_1.z.boolean()
});
exports.subscriptionPlanStatusSchema = zod_1.z.nativeEnum(types_1.SubscriptionPlanStatus);
exports.userPrivilegedSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    email: zod_1.z.string().nullable(),
    emailVerificationToken: zod_1.z.string().nullable(),
    nonce: zod_1.z.string().nullable(),
    subscriptionPlan: zod_1.z.string().nullable(),
    subscriptionPlanStatus: exports.subscriptionPlanStatusSchema,
    stripeCustomerId: zod_1.z.string().nullable(),
    numGeneratedImagesRemaining: zod_1.z.number(),
    numHighResDownloadsRemaining: zod_1.z.number(),
    numMaxAvatarsAllowed: zod_1.z.number(),
    stripeBillingErrorMessage: zod_1.z.string().nullable(),
    hasEverPaid: zod_1.z.boolean(),
    isUnsubscribedFromEmails: zod_1.z.boolean(),
    intercomUserHash: zod_1.z.string().nullable(),
    apiKey: zod_1.z.string(),
    inviteCode: zod_1.z.string().nullable()
});
exports.statusSchema = zod_1.z.nativeEnum(types_1.Status);
exports.trainedEntitySchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    userId: zod_1.z.string(),
    status: exports.statusSchema,
    replicateTrainingId: zod_1.z.string().nullable(),
    replicateModelVersionId: zod_1.z.string().nullable(),
    replicateModelName: zod_1.z.string(),
    replicateAccountName: zod_1.z.string(),
    identifierToken: zod_1.z.string(),
    classNoun: zod_1.z.string(),
    displayName: zod_1.z.string(),
    thumbnailUrl: zod_1.z.string(),
    trainingDataZipUrl: zod_1.z.string(),
    input: exports.jsonValueSchema
});
exports.predictionImageSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    urlOriginal: zod_1.z.string(),
    urlHosted: zod_1.z.string().nullable(),
    urlHostedStatus: exports.statusSchema,
    urlUpscaled4x: zod_1.z.string().nullable(),
    urlUpscaled4xStatus: exports.statusSchema,
    isDeleted: zod_1.z.boolean(),
    isFeatured: zod_1.z.boolean(),
    predictionId: zod_1.z.string()
});
exports.predictionSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    status: exports.statusSchema,
    error: zod_1.z.string().nullable(),
    model: zod_1.z.string(),
    input: exports.jsonValueSchema,
    output: exports.jsonValueSchema,
    startedAt: zod_1.z.date().nullable(),
    completedAt: zod_1.z.date().nullable(),
    replicateId: zod_1.z.string().nullable()
});
exports.inputQueryPredictionSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    inputQueryId: zod_1.z.string(),
    predictionId: zod_1.z.string()
});
exports.visibilitySchema = zod_1.z.nativeEnum(types_1.Visibility);
exports.inputQuerySchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    userId: zod_1.z.string(),
    prevInputQueryId: zod_1.z.string().nullable(),
    parentPredictionImageId: zod_1.z.string().nullable(),
    inputText: zod_1.z.string(),
    inputStyle: zod_1.z.string().nullable(),
    inputImage: zod_1.z.string().nullable(),
    inputSeed: zod_1.z.number(),
    trainedEntityId: zod_1.z.string().nullable(),
    numVariations: zod_1.z.number(),
    visibility: exports.visibilitySchema,
    didSendImagePredictionRequests: zod_1.z.boolean(),
    metadata: exports.jsonValueSchema
});
exports.bookmarkedPredictionImageSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    predictionImageId: zod_1.z.string(),
    userId: zod_1.z.string()
});
exports.dislikedPredictionImageSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.date(),
    updatedAt: zod_1.z.date(),
    predictionImageId: zod_1.z.string(),
    userId: zod_1.z.string()
});
exports.loggedInUserPredictionImageSchema = exports.predictionImageSchema.and(zod_1.z.object({
    prediction: exports.predictionSchema.and(zod_1.z.object({
        inputQueryPredictions: zod_1.z.array(exports.inputQueryPredictionSchema.and(zod_1.z.object({
            inputQuery: exports.inputQuerySchema
        })))
    })),
    bookmarkedPredictionImages: zod_1.z.array(exports.bookmarkedPredictionImageSchema),
    dislikedPredictionImages: zod_1.z.array(exports.dislikedPredictionImageSchema)
}));
exports.userLoggedInDataSchema = exports.userSchema.and(zod_1.z.object({
    userPrivileged: exports.userPrivilegedSchema,
    trainedEntities: zod_1.z.array(exports.trainedEntitySchema)
}));

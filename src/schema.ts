// Generated by ts-to-zod
import { z } from "zod";
import { JsonValue, GlobalRole, SubscriptionPlanStatus, Status } from "./types";

export const jSONValueSchema: z.ZodSchema<JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.record(jSONValueSchema),
    z.array(jSONValueSchema),
  ])
);

export const globalRoleSchema = z.nativeEnum(GlobalRole);

export const userSchema = z.object({
  id: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  role: globalRoleSchema,
  isEmailVerified: z.boolean(),
  didAgreeToTOS: z.boolean(),
  doAutoTrainEntities: z.boolean(),
  userPrivilegedId: z.string(),
});

export const subscriptionPlanStatusSchema = z.nativeEnum(
  SubscriptionPlanStatus
);

export const userPrivilegedSchema = z.object({
  id: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  email: z.string().nullable(),
  emailVerificationToken: z.string().nullable(),
  nonce: z.string().nullable(),
  subscriptionPlan: z.string().nullable(),
  subscriptionPlanStatus: subscriptionPlanStatusSchema,
  stripeCustomerId: z.string().nullable(),
  numGeneratedImagesRemaining: z.number(),
  numHighResDownloadsRemaining: z.number(),
  numMaxAvatarsAllowed: z.number(),
  stripeBillingErrorMessage: z.string().nullable(),
  hasEverPaid: z.boolean(),
  isUnsubscribedFromEmails: z.boolean(),
  intercomUserHash: z.string().nullable(),
  apiKey: z.string(),
  inviteCode: z.string().nullable(),
});

export const statusSchema = z.nativeEnum(Status);

export const trainedEntitySchema = z.object({
  id: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  userId: z.string(),
  status: statusSchema,
  replicateTrainingId: z.string().nullable(),
  replicateModelVersionId: z.string().nullable(),
  replicateModelName: z.string(),
  replicateAccountName: z.string(),
  identifierToken: z.string(),
  classNoun: z.string(),
  displayName: z.string(),
  thumbnailUrl: z.string(),
  trainingDataZipUrl: z.string(),
  input: jSONValueSchema,
});

export const userLoggedInDataSchema = z.object({
  user: userSchema.and(
    z.object({
      userPrivileged: userPrivilegedSchema,
      trainedEntities: z.array(trainedEntitySchema),
    })
  ),
});
